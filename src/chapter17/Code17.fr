module chapter17.Code17 where

import Data.Monoid
import frege.test.QuickCheck
import Data.Char
import Data.List

-- 17.4 Applicative functors are monoidal functors

fmapTest = once $ fmap (+1) [1, 2, 3]  == [2,3,4]
--pureTest = once $ pure (+1) <*> [1..3] == [2,3,4]
-- TODO ambiguous type error

-- pureTest1 = once $ pure ([1 :: Int]) == [1]
-- pureTest2 = once $ pure (1 :: Maybe Int) == Just 1
-- pureTest3 = once $ pure (1 :: (Either a Int)) == (Right 1)
-- pureTest4 = once $ pure (1 :: ([a], Int)) == ([],1)

--TODO 

mappendTest = once $ ([(*2), (*3)] <*> [4, 5]) == [8,10,12,15]

maybeTest1 = once $ (Just (*2) <*> Just 2) == (Just 4)
maybeTest2 = once $ (Just (*2) <*> Nothing) == Nothing
-- maybeTest3 = once $ (Nothing <*> (Just 2)) == Nothing
-- maybeTest4 = once $ (Nothing <*> Nothing) == Nothing
-- TODO ambiguous types

-- Show me the monoids

monoidFmapTest = once $ fmap (+1) ("blah", 0) == ("blah",1)
--applicativeTest = once $ (("Woo", (+1)) <*> (" Hoo!", 0)) == ("Woo Hoo!", 1)

--monoidTest1 = once $ (Sum 2, (+1)) <*> (Sum 0, 0) == (Sum {getSum = 2},1)
--monoidTest2 = once $ (Product 3, (+9))<*>(Product 2, 8) == (Product {getProduct = 6},17)
--monoidTest3 = once $ (All True, (+1))<*>(All False, 0) == (All {getAll = False},1)

-- FREGE Types don't exist in Frege

{-

-- Maybe Monoid and Applicative

instance Monoid a => Monoid (Maybe a) where
  mempty = Nothing
  mappend m Nothing = m
  mappend Nothing m = m
  mappend (Just a) (Just a') = Just (mappend a a')

instance Applicative Maybe where
  pure = Just

  Nothing <*> _     = Nothing
  _ <*> Nothing     = Nothing
  Just f <*> Just a = Just (f a)
in FREGE:
- data type `Maybe` is already an instance of class `Monoid.Semigroup` (Monoid.Monoid_Maybe 
	 introduced on line 3)
- data type `Maybe` is already an instance of class `Monoid.Monoid` (Monoid.Monoid_Maybe 
	 introduced on line 3)
-hiding previously (line 3) imported alias for instance `Monoid.Monoid_Maybe` through instance 
	 `Monoid_Maybe`
-}


-- Tuple Monoid and Applicative side by side

instance (Monoid a, Monoid b) => Monoid (a,b) where
  mempty = (mempty, mempty)
  (a, b) `mappend` (a',b') = (a `mappend` a', b `mappend` b')
  
instance Monoid a => Applicative ((,) a) where
  pure x = (mempty, x)
  (u, f) <*> (v, x) = (u `mappend` v, f x)

-- 17.5 Applicative in use

-- List Applicative

{-
-- f ~ []
(<*>):: f (a->b) -> f a-> f b
(<*>)::[](a->b) ->[]a->[]b

-- more syntactically typical
(<*>) :: [(a -> b)] -> [a] -> [b]

pure::a-> fa
pure::a-> []a

-}


listApplicativeTest1 = once $ fmap (2^) [1, 2, 3] == [2,4,8]
listApplicativeTest2 = once $ fmap (^2) [1, 2, 3] == [1,4,9]
listApplicativeTest3 = once $ apply [(+1), (*2)] [2, 4] == [3,5,4,8]

tupleListApplicativeTest1 = once $  (((,) <$> [1, 2]) <*> [3, 4]) == [(1,3),(1,4),(2,3),(2,4)]
tupleListApplicativeTest2 = once $ apply (fmap (,) [1, 2]) [3, 4] == [(1,3),(1,4),(2,3),(2,4)]
tupleListApplicativeTest3 = once $ liftA2 (,) [1, 2] [3, 4] == [(1,3),(1,4),(2,3),(2,4)]

listApplicativeTest4 = once $ (((+) <$> [1, 2]) <*> [3, 5]) == [4,6,5,7]
listApplicativeTest5 = once $ apply (fmap (+) [1, 2]) [3, 5] == [4,6,5,7]
listApplicativeTest6 = once $ liftA2 (+) [1, 2] [3, 5]  == [4,6,5,7]
listApplicativeTest7 = once $ ((max <$> [1, 2]) <*> [1, 4]) == [1,4,2,4]
listApplicativeTest8 = once $ apply (fmap max [1, 2]) [1, 4] == [1,4,2,4]
listApplicativeTest9 = once $ liftA2 max [1, 2] [1, 4]  == [1,4,2,4]


-- :t lookup
-- lookup :: Eq a => a -> [(a, b)] -> Maybe b

-- FREGE: lookup is not defined in prelude
-- | 'lookup' @key assocs@ looks up a key in an association list.
lookup                  :: (Eq a) => a -> [(a,b)] -> Maybe b
lookup _key []          =  Nothing
lookup  key ((x,y):xys)
    | key == x          =  Just y
    | otherwise         =  lookup key xys


l = lookup 3 [(3, unpacked "hello")]
lookupTest1 = once $ l == Just (unpacked "hello")
lookupTest2 = once $ (fmap length $ l) == Just 5
c (x:xs) = toUpper x:xs
lookupTest3 = once $(fmap c $ l) == Just (unpacked "Hello")

-- TODO fromList does not exist
-- m = fromList [(3, unpacked "hello")]
-- lookupTest4 = once $ fmap c $ lookup 3 m == Just (unpacked "Hello")


f x = lookup x [ (3, "hello"), (4, "julie"), (5, "kbai")]
g y = lookup y [ (7, "sup?"), (8, "chris"), (9, "aloha")]
h z = lookup z [(2, 3), (5, 6), (7, 8)]
m x = lookup x [(4, 10), (8, 13), (1, 9001)]

lookupTest5 = once $ f 3 == Just "hello"
lookupTest6 = once $ g 8 == Just "chris"

lookupTest7 = once $ ((++) `fmap` (f 3)) `apply` g 7 == Just ("hellosup?")
-- lookupTest7 = once $ ((++) <$> (f 3)) <*> g 7 == Just ("hellosup?")
lookupTest8 = once $ ((+) `fmap` (h 5)) `apply` m 1  == Just 9007
--lookupTest8 = once $ (+) <$> h 5 <*> m 1  == Just 9007
lookupTest9 = once $ ((+) `fmap` (h 5)) `apply` m 6  == Nothing
--lookupTest9 = once $ (+) <$> h 5 <*> m 6  == Nothing
-- TODO 

liftA2Test1 = once $ liftA2 (++) (g 9) (f 4) == Just "alohajulie"
liftA2Test2 = once $ liftA2 (^) (h 5) (m 4)  == Just 60466176
liftA2Test3 = once $ liftA2 (*) (h 5) (m 4)  == Just 60
liftA2Test4 = once $ liftA2 (*) (h 1) (m 1)  == Nothing

-- Exercises: Lookups

--TODO

-- 1.
added :: Maybe Integer
added = fmap (+3) (lookup 3 $ zip [1, 2, 3] [4, 5, 6])

added' :: Maybe Integer
added' = (+3) <$> (lookup 3 $ zip [1, 2, 3] [4, 5, 6])

addedTest1 = once $ added == Just 9
addedTest2 = once $ added' == Just 9

-- 2.
y :: Maybe Integer
y = lookup 3 $ zip [1, 2, 3] [4, 5, 6]

z :: Maybe Integer
z = lookup 2 $ zip [1, 2, 3] [4, 5, 6]

tupled :: Maybe (Integer, Integer)
tupled = ap (fmap (,) y) z

tupled' :: Maybe (Integer, Integer)
tupled' = (,) <$> y <*> z

tupledTest1 = once $ tupled == Just (6,5)
tupledTest2 = once $ tupled' == Just (6,5)

-- 3.
import Data.List (elemIndex)

x' :: Maybe Int
x' = elemIndex 3 [1, 2, 3, 4, 5]

y' :: Maybe Int
y' = elemIndex 4 [1, 2, 3, 4, 5]

max' :: Int -> Int -> Int
max' = max

maxed :: Maybe Int
maxed = ap (fmap max' x') y'

maxed' :: Maybe Int
maxed' = max' <$> x' <*> y'

maxedTest1 = once $ maxed == Just 3
maxedTest2 = once $ maxed' == Just 3

-- 4.
xs = [1, 2, 3]
ys = [4, 5, 6]

-- FREGE : Type mismatch Integer <-> Int
x'' :: Maybe Int
x'' = lookup 3 $ zip xs ys

y'' :: Maybe Int
y'' = lookup 2 $ zip xs ys

-- TODO
--summed' :: Maybe Int
--summed' = sum $ (,) x'' y''
-- main = println summed

-- Identity

-- Specializing the types

-- f ~ Identity
-- Applicative f =>

{-
type Id = Identity

(<*>) :: f(a->b)-> fa-> fb
(<*>) :: Id (a -> b) -> Id a -> Id b

pure :: a-> fa
pure :: a -> Id a
-}

-- TODO Identity compile error
idXs = [1, 2, 3]
idXs' = [9, 9, 9]
idTest1 = once $ apply (fmap const idXs) idXs' == [1,1,1,2,2,2,3,3,3]
idTest2 = once $ (const `fmap` idXs) `apply` idXs' == [1,1,1,2,2,2,3,3,3]
--idTest3 = once $ (const <$> idXs) <*> idXs' == [1,1,1,2,2,2,3,3,3]
-- TODO why does this not work?

mkId = Identity
idTest4 = once $ apply (fmap const (mkId xs)) (mkId xs') == Identity [1,2,3]
idTest5 = once $ (const `fmap` (mkId xs)) `apply` (mkId xs') == Identity [1,2,3]
-- idTest6 = once $ (const <$> (mkId xs)) <*> (mkId xs') == Identity [1,2,3]
-- TODO why does this not work?

-- Exercise: Identity Instance

data Identity a = Identity a
derive Eq (Identity a)
derive Ord (Identity a)
derive Show (Identity a)

instance Functor Identity where
 fmap f (Identity a) = Identity (f a)
 
instance Applicative Identity where
  pure a = (Identity a)
  (<*>) (Identity f) (Identity a) = Identity (f a)
 
-- Constant

-- f ~ Constant e
{-
type C = Constant
(<*>) :: f (a->b)-> fa-> fb
(<*>) :: C e (a -> b) -> C e a -> C e b pure::a-> fa
pure :: a -> C e a
-}

-- TODO include or remove 
{-
Prelude> let f = Constant (Sum 1)
Prelude> let g = Constant (Sum 2)
Prelude> f <*> g
Constant {getConstant = Sum {getSum = 3}
Prelude> Constant undefined <*> g
Constant (Sum {getSum =
  *** Exception: Prelude.undefined
Prelude> pure 1
1
Prelude> pure 1 :: Constant String Int
Constant {getConstant = ""}
-}

-- Exercise: Constant Instance

data Constant a b = Constant { getConstant :: a }
derive Eq (Constant a b)
derive Ord (Constant a b)
derive Show (Constant a b)

instance Functor (Constant a) where
  fmap _ (Constant a) = Constant a
  
instance Monoid a => Applicative (Constant a) where
  pure _ = Constant mempty
  (<*>) (Constant a) (Constant b) = Constant (mappend a b)


-- Maybe Applicative

 -- see Code17_MaybeApplicative.fr

-- 17.7 You knew this was coming

-- not done, as library doesn't exist in frege

-- 17.8 ZipList Monoid

-- Zero vs. Identity

data ZipList a = ZipList a
derive Eq (ZipList a)
derive Ord (ZipList a)
derive Show (ZipList a)

-- List Applicative Exercise

data List a = Nil | Cons a (List a)
derive Eq (List a)
derive Show (List a)

instance Functor List where
  fmap f (Nil) = Nil
  fmap f (Cons a xs) = Cons (f a) (fmap f xs)
  
instance Applicative List where
  pure a = Cons a Nil
  (<*>) Nil         _           = Nil
  (<*>) (Cons f fs) (Cons x xs) = Cons (f x) (fs <*> xs)
  (<*>) _           Nil         = Nil


f' = Cons (+1) (Cons (*2) Nil)
v' = Cons 1 (Cons 2 Nil)

listApplicativeTest = f' <*> v'
-- Cons 2 (Cons 3 (Cons 2 (Cons 4 Nil)))

append :: List a -> List a -> List a
append Nil ys = ys
append (Cons x xs) ys = Cons x $ xs `append` ys

fold :: (a -> b -> b) -> b -> List a -> b
fold _ b Nil = b
fold f b (Cons h t) = f h (fold f b t)

concat' :: List (List a) -> List a
concat' = fold append Nil

-- write this one in terms -- of concat' and fmap
flatMap :: (a -> List b) -> List a -> List b
flatMap f as = concat' (fmap f as)

listFmapTest = once $ fmap (\x -> [x, 9]) [1, 2, 3] ==[[1,9],[2,9],[3,9]]
toMyList' = foldr Cons Nil
xs' = toMyList' [1, 2, 3]
c' = Cons
myF x = x `c'` (9 `c'` Nil)
flatMapResult = flatMap myF xs'
-- Cons 1 (Cons 9 (Cons 2 (Cons 9 (Cons 3 (Cons 9 Nil)))))

-- ZipList Applicative Exercise

take' :: Int -> List a -> List a
take' = undefined
  
data ZipList' a = ZipList' (List a)
derive Eq (ZipList' a)
derive Show (ZipList' a)

{-
frege.tTest.QuickCheck.Checkers doe not exist for Frege (EqProp)

instance Eq a => EqProp (ZipList' a) where
  xs =-= ys = xs' `eq` ys'
    where
      xs' = let (ZipList' l) = xs in take' 3000 l
      ys' = let (ZipList' l) = ys in take' 3000 l
-}
      
instance Functor ZipList' where
  fmap f (ZipList' xs) = ZipList' $ fmap f xs
  
{- 
--TODO
instance Applicative ZipList' where
  pure _ = ZipList mempty
  (<*>) (ZipList a) (ZipList b) = ZipList (mappend a b)

zl' = ZipList'
z1 = zl' [(+9), (*2), (+8)]
z1' = zl' [1..3]
zipListTest1 = once $ z1 <*> z1' == ZipList' [10,4,11]
z2' = zl' (repeat 1)
zipListTest2 = once $ z1 <*> z2' == ZipList' [10,2,9]
  -}

-- Either and Validation Applicative

-- Specializing the types
-- f ~ Either e
{-
type E = Either
(<*>) :: f(a -> b)-> fa-> fb
(<*>) :: E e (a -> b) -> E e a -> E e b
pure :: a -> f a pure :: a -> E e a
-}

-- Either versus Validation

-- TODO