module chapter11.Code11 where

import frege.test.QuickCheck

-- 11.5 Data constructors and values

data PugType = PugData
data HuskyType a = HuskyData
data DogueDeBordeaux doge = DogueDeBordeaux doge

myPug = PugData :: PugType

myHusky :: HuskyType a
myHusky = HuskyData

myOtherHusky :: Num a => HuskyType a
myOtherHusky = HuskyData

myOtherOtherHusky :: HuskyType [[[[Int]]]]
myOtherOtherHusky = HuskyData

myDoge :: DogueDeBordeaux Int
myDoge = DogueDeBordeaux 10

data Doggies a = Husky a | Mastiff a
derive Eq (Doggies a)
derive Show (Doggies a)


-- Exercises: Dog Types
-- 1. Is Doggies a type constructor or a data constructor?
-- type constructor
-- 2. What is the kind of Doggies?
-- FREGE :k not possible in frepl
-- 3. What is the kind of Doggies String?
-- 4. What is the type of Husky 10?
-- 5. What is the type of Husky (10 :: Integer)?
-- 6. What is the type of Mastiff "Scooby Doo"?
-- 7. Is DogueDeBordeaux a type constructor or a data constructor?
-- 8. What is the type of DogueDeBordeaux?
-- 9. What is the type of DogueDeBordeaux "doggie!"

-- 11.6 What’s a type and what’s data?

data Price = Price Integer
derive Eq Price
derive Show Price

data Manufacturer = Mini | Mazda | Tata
derive Eq Manufacturer
derive Show Manufacturer

data Airline 
    = PapuAir
    | CatapultsR'Us
    | TakeYourChancesUnited
derive Eq Airline
derive Show Airline

data Vehicle 
    = Car   Manufacturer Price
    | Plane Airline
derive Eq   Vehicle
derive Show Vehicle

-- Exercises: Vehicles

myCar    = Car Mini  (Price 14000)
urCar    = Car Mazda (Price 20000)
clownCar = Car Tata  (Price 7000)
doge = Plane PapuAir

carList = [myCar, urCar, clownCar]

-- 1.
-- :t myCar
-- myCar :: Vehicle

-- 2.
isCar :: Vehicle -> Bool
isCar (Car _ _ ) = True
isCar _ = False

isPlane :: Vehicle -> Bool
isPlane (Plane _) = True
isPlane _ = False

areCars :: [Vehicle] -> [Bool]
areCars = map isCar

-- 3.
getManu :: Vehicle -> Manufacturer
getManu (Car manufacturer price ) = manufacturer

-- 4.
-- Haskell: Non-exhaustive patterns in function getManu
-- Frege: function pattern is refutable, consider adding a case for Vehicle.Plane_

-- 5.
data Size = Size Integer
derive Eq Size
derive Show Size

data Vehicle' = Car' Manufacturer Price | Plane' Airline Size
derive Eq Vehicle'
derive Show Vehicle'

isPlane' :: Vehicle' -> Bool
isPlane' (Plane' _ _) = True
isPlane' _ = False

doge' = Plane' PapuAir (Size 22)

-- 11.7 Data constructor arities

-- nullary
data Example0 = Example0
derive Eq Example0
derive Show Example0

-- unary
data Example1 = Example1 Int
derive Eq Example1
derive Show Example1

-- product of Int and String
data Example2 = Example2 Int String
derive Eq Example2
derive Show Example2


data MyType = MyVal Int
derive Eq MyType
derive Show MyType

-- 11.8 What makes these datatypes algebraic?

-- Exercises: Cardinality
-- 1. 
-- data PugType = PugData
-- cardinality = 1

-- 2.
-- data Airline = PapuAir | CatapultsR'Us | TakeYourChancesUnited
-- cardinality = 3

-- 3. Given what we know about Int8, what’s the cardinality of Int16?
-- cardinality = 2^16 (65536)

-- 4. Use the REPL and maxBound and minBound to examine Int and Integer. What can you say about the cardinality of those types?

-- 5. Extra credit (impress your friends!): What’s the connection between the 8 in Int8 and that type’s cardinality of 256?
-- 2^x where x is the number of bits

-- Simple datatypes with nullary data constructors
data Example = MakeExample
derive Show Example

-- Exercises: For Example
data IntExample a = MakeIntExample Int
derive Show (IntExample Int)

-- Unary constructors
data Goats = Goats Int
derive Eq Goats
derive Show Goats

-- 11.9 newtype

tooManyGoats :: Int -> Bool
tooManyGoats n = n > 42

data Goats' = Goats' Int
derive Eq Goats'
derive Show Goats'

newtype Cows = Cows Int
derive Eq Cows
derive Show Cows

tooManyGoats' :: Goats' -> Bool
tooManyGoats' (Goats' n) = n > 42

class TooMany a where
    tooMany :: a -> Bool

instance TooMany Int where
    tooMany n = n > 42


newtype Goats1 = Goats1 Int
derive Show Goats1

instance TooMany1 Goats1 where
    tooMany1 (Goats1 n) = n > 43

class TooMany1 a where
    tooMany1 :: a -> Bool

instance TooMany1 Int where
    tooMany1 n = n > 42

newtype Goats2 = Goats2 Int
derive Eq Goats2
derive Show Goats2

instance TooMany1 Goats2 where
    tooMany1 (Goats2 n) = tooMany1 n
        
-- Exercises: Logic Goats
-- 1.
{-
instance TooMany (Int, String) where
    tooMany (n, s) = n > 42
-}
  
-- 2.
{-
instance TooMany (Int, Int) where
    tooMany (n1, n2) = (n1 + n2) > 42
-}
-- 3.
instance (Num a, TooMany a) => TooMany (a, a) where
    tooMany (n1, n2) = (n1 + n2) > 42
-- Frege: multiple (differently subtyped) instances of (,)-tuple not possible

-- 11.10 Sum types
-- Exercises: Pity the Bool

-- 1.
data BigSmall = Big Bool | Small Bool
derive Eq BigSmall
derive Show BigSmall

-- 2.
-- FREGE not possible?
 -- bring Int8 in scope
--data NumberOrBool = Numba Int8 | BoolyBool Bool
--derive Eq NumberOrBool
--derive Show NumberOrBool
-- parentheses due to syntactic -- collision between (-) minus -- and the negate function
--myNumba = Numba (-128)


-- 11.11 Product types
data QuantumBool = QuantumTrue | QuantumFalse | QuantumBoth
derive Eq QuantumBool
derive Show QuantumBool

data TwoQs = MkTwoQs QuantumBool QuantumBool
derive Eq TwoQs
derive Show TwoQs

type TwoQs1 = (QuantumBool, QuantumBool)

data Person = MkPerson String Int
derive Eq Person
derive Show Person

-- sample data
jm = MkPerson "julie" 108 
ca = MkPerson "chris" 16

namae :: Person -> String
namae (MkPerson s _) = s

data Person1 =
    Person1 { name :: String , age :: Int }
derive Eq Person1
derive Show Person1



-- 11.12 Normal form

type AuthorName = String

data Author = Fiction AuthorName 
            | Nonfiction AuthorName 
derive Eq Author
derive Show Author

data Expr =
    Number Int
    | Add Expr Expr
    | Minus Expr
    | Mult Expr Expr
    | Divide Expr Expr

type Number' = Int
type Add' = (Expr, Expr)
type Minus' = Expr
type Mult' = (Expr, Expr)
type Divide' = (Expr, Expr)

type Expr' =
    Either Number'
    (Either Add'
    (Either Minus'
    (Either Mult' Divide')))

-- Exercises: How Does Your Garden Grow?

data FlowerType = Gardenia
    | Daisy
    | Rose
    | Lilac
derive Show FlowerType

type Gardener = String

data Garden =
    Garden Gardener FlowerType
derive Show Garden

-- 11.13 Constructing and deconstructing values

data GuessWhat = Chickenbutt
derive Eq GuessWhat
derive Show GuessWhat


data Id a = MkId a
derive Eq (Id a)
derive Show (Id a)

data Product a b = Product a b
--derive Eq Product
--derive Show Product

data Sum a b =
    First a
    | Second b
derive Eq (Sum a b)
derive Show (Sum a b)


data RecordProduct a b =
    RecordProduct { pfirst :: a
                  , psecond :: b }
derive Eq (RecordProduct a b)
derive Show (RecordProduct a b)

newtype NumCow = NumCow Int
derive Eq NumCow
derive Show NumCow

newtype NumPig =
    NumPig Int
derive Eq NumPig
derive Show NumPig

data Farmhouse = Farmhouse NumCow NumPig
derive Eq Farmhouse
derive Show Farmhouse

type Farmhouse' = Product NumCow NumPig

newtype NumSheep = NumSheep Int
derive Eq NumSheep
derive Show NumSheep
    
data BigFarmhouse = BigFarmhouse NumCow NumPig NumSheep
derive Eq BigFarmhouse
derive Show BigFarmhouse

type BigFarmhouse' =
    Product NumCow (Product NumPig NumSheep)

type AName = String
type Age = Int
type LovesMud = Bool

type PoundsOfWool = Int

data CowInfo = CowInfo AName Age
derive Eq CowInfo
derive Show CowInfo

data PigInfo = PigInfo AName Age LovesMud
derive Eq PigInfo
derive Show PigInfo

data SheepInfo = SheepInfo AName Age PoundsOfWool
derive Eq SheepInfo
derive Show SheepInfo


data Animal =
    Cow CowInfo
    | Pig PigInfo
    | Sheep SheepInfo
derive Eq Animal
derive Show Animal

-- Alternately
type Animal' =
    Sum CowInfo (Sum PigInfo SheepInfo)

    -- Constructing values

trivialValue :: GuessWhat
trivialValue = Chickenbutt

data Id' a  = MkId' a
derive Eq (Id' a)
derive Show (Id' a)

-- note:
-- MkId :: a -> Id a

idInt :: Id' Integer
idInt = MkId' 10

type Awesome = Bool
type PersonName = String

person :: Product PersonName Awesome
person = Product "Simon" True

data Sum' a b =
    First' a
    | Second' b
derive Eq (Sum' a b)
derive Show (Sum' a b)

-- data Twitter =
--     Twitter deriving (Eq, Show)
-- 
-- data AskFm =
--     AskFm deriving (Eq, Show)

-- socialNetwork :: Sum Twitter AskFm
-- socialNetwork = First Twitter

data SocialNetwork =
      Twitter
    | AskFm
derive Eq SocialNetwork
derive Show SocialNetwork

type Twitter = String
type AskFm = String

twitter :: Sum Twitter AskFm
twitter = First "Twitter"

askfm :: Sum Twitter AskFm
askfm = First "AskFm"


myRecord :: RecordProduct Integer Float
myRecord = RecordProduct 42 0.00001

myRecord' :: RecordProduct Integer Float
myRecord' =
    RecordProduct { pfirst = 42
                  , psecond = 0.00001 }

data OperatingSystem =
    GnuPlusLinux
    | OpenBSDPlusNevermindJustBSDStill
    | Mac
    | Windows
derive Eq OperatingSystem
derive Show OperatingSystem

data ProgLang =
    Haskell
    | Agda
    | Idris
    | PureScript
derive Eq ProgLang
derive Show ProgLang

data Programmer =
    Programmer { os :: OperatingSystem
                , lang :: ProgLang }
derive Eq Programmer
derive Show Programmer

nineToFive :: Programmer
nineToFive = Programmer { os = Mac
                        , lang = Haskell }

-- We can reorder stuff
-- when we use record syntax

feelingWizardly :: Programmer
feelingWizardly =
    Programmer { lang = Agda
                , os = GnuPlusLinux }

-- Exercise: Programmers

allOperatingSystems :: [OperatingSystem]
allOperatingSystems =
    [ GnuPlusLinux
    , OpenBSDPlusNevermindJustBSDStill
    , Mac
    , Windows
    ]

quickTestAllOperatingSystems = once $ (length allOperatingSystems == 4)

allLanguages :: [ProgLang]
allLanguages =
    [Haskell, Agda, Idris, PureScript]
    
quickTestAllLanguages = once $ (length allLanguages == 4)


allProgrammers :: [Programmer]
allProgrammers = [Programmer { lang = lang, os = os } | lang <- allLanguages, os <- allOperatingSystems]

quickTestAllProgrammers = once $ (length allProgrammers == 16)

-- Accidental bottoms from records

-- Works the same as if
-- we'd used record syntax.
data ThereYet = There Float Int Bool
derive Eq ThereYet
derive Show ThereYet
    
nope :: Float -> Int -> Bool -> ThereYet
nope = undefined

notYet :: Int -> Bool -> ThereYet
notYet = nope 25.5

notQuite :: Bool -> ThereYet
notQuite = notYet 10

yusssss :: ThereYet
yusssss = notQuite False

-- Notice the way our types progressed.
-- There ::     Float -> Int -> Bool -> ThereYet
-- notYet ::             Int -> Bool -> ThereYet
-- notQuite ::                  Bool -> ThereYet
-- yusssss ::                           ThereYet

-- Deconstructing values

newtype Name = Name String
derive Show Name
newtype Acres = Acres Int
derive Show Acres

-- FarmerType is a Sum
data FarmerType = DairyFarmer
    | WheatFarmer
    | SoybeanFarmer
derive Show FarmerType

-- Farmer is a plain ole product of
-- Name, Acres, and FarmerType
data Farmer = Farmer Name Acres FarmerType
derive Show Farmer

isDairyFarmer :: Farmer -> Bool
isDairyFarmer (Farmer _ _ DairyFarmer) =
    True
isDairyFarmer _ =
    False

data FarmerRec =
    FarmerRec { name :: Name
              , acres :: Acres
              , farmerType :: FarmerType }
derive Show FarmerRec

isDairyFarmerRec :: FarmerRec -> Bool
isDairyFarmerRec farmer =
    case FarmerRec.farmerType farmer of
        DairyFarmer -> True
        _           -> False

-- Accidental bottoms from records

-- Don't.
-- data Automobile = Null
--     | Car { make :: String
--            , model :: String
--            , year :: Integer }
--            deriving (Eq, Show)


-- Split out the record/product
data Car1 = Car1 { make :: String
                , model :: String
                , year :: Integer }
derive Eq Car1
derive Show Car1

-- The Null is still not great, but
-- we're leaving it in to make a point
data Automobile = Null
                | Automobile Car1
derive Eq Automobile
derive Show Automobile

-- 11.14 Function type is exponential
-- see Code11_14.fr

-- 11.15 Higher-kinded datatypes

-- identical to (a, b, c, d)
data Silly a b c d = MkSilly a b c d
derive Show (Silly a b c d)

-- 11.17 Binary Tree
data BinaryTree a = Leaf | Node (BinaryTree a) a (BinaryTree a)
derive Eq (BinaryTree a)
derive Show (BinaryTree a)
derive Ord (BinaryTree a)

insert' :: Ord a
            => a
            -> BinaryTree a
            -> BinaryTree a
insert' b Leaf = Node Leaf b Leaf
insert' b (Node left a right)
    | b == a = Node left a right
    | b < a = Node (insert' b left) a right
    | b > a = Node left a (insert' b right)

-- Write map for BinaryTree

mapTree :: (a -> b)
            -> BinaryTree a
            -> BinaryTree b
mapTree _ Leaf = Leaf
mapTree f (Node left a right) =
    Node (mapTree f left) (f a) (mapTree f right)

testTree' :: BinaryTree Integer
testTree' =
    Node (Node Leaf 3 Leaf)
         1
         (Node Leaf 4 Leaf)
         
mapExpected :: BinaryTree Integer
mapExpected =
    Node (Node Leaf 4 Leaf)
         2
         (Node Leaf 5 Leaf)

-- acceptance test for mapTree
mapOkay =
    if mapTree (+1) testTree' == mapExpected
    then print "yup okay!"
    else error "test failed!"


-- Convert binary trees to lists
preorder :: BinaryTree a -> [a]
preorder Leaf = []
preorder (Node left a right) = [a] ++ preorder left ++ preorder right

inorder :: BinaryTree a -> [a]
inorder Leaf = []
inorder (Node left a right) = inorder left ++ [a] ++ inorder right

postorder :: BinaryTree a -> [a]
postorder Leaf = []
postorder (Node left a right) = postorder left ++ postorder right ++ [a]

testTree :: BinaryTree Integer
testTree =
    Node (Node Leaf 1 Leaf)
         2
         (Node Leaf 3 Leaf)

testPreorder :: IO ()
testPreorder =
    if preorder testTree == [2, 1, 3]
    then putStrLn "Preorder fine!"
    else putStrLn "Bad news bears."

quickTestPreorder = once $ preorder testTree == [2, 1, 3]

testInorder :: IO ()
testInorder =
    if inorder testTree == [1, 2, 3]
    then putStrLn "Inorder fine!"
    else putStrLn "Bad news bears."

quickTestInorder = once $ inorder testTree == [1, 2, 3]

testPostorder :: IO ()
testPostorder =
    if postorder testTree == [1, 3, 2]
    then putStrLn "Postorder fine!"
    else putStrLn "postorder failed check"

quickTestPostorder = once $ postorder testTree == [1, 3, 2]


main1 :: IO ()
main1 = do
    testPreorder
    testInorder
    testPostorder

-- Write foldr for BinaryTree

-- any traversal order is fine
foldTree :: (a -> b -> b)
            -> b
            -> BinaryTree a
            -> b

foldTree f b Leaf = b
foldTree f b (Node left a right) = f a (foldTree f (foldTree f b left) right)

foldTreeTest1 = once $ (foldTree (`+`) 1 testTree) == 7
foldTreeTest2 = once $ (foldTree (`*`) 1 testTree) == 6