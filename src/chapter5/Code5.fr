module chapter5.Code5 where

import frege.test.QuickCheck


main :: [String] -> IO ()
main args = println "Code5"

propertyOne = once $ (4 == 4)

commutativity xs = property $ ((reverse xs) == reverse (reverse xs))

hasHit = once $ (True == True)

--Parametricity 
-- id :: a -> a  -- parametrically polymorphic

-- negate :: Num a => a -> a -- contrainted polymorphic

parametricity :: a -> a -> a
parametricity x y = x
-- parametricity x y = y

parametricity1 :: a -> b -> b
parametricity1 x y = y

-- typeInference1.hs
f :: Num a => a -> a -> a
f x y = x + y + 3

-- typeInference2.hs
f2 x y = x + y + 3

-- Apply yourself
-- (++) :: [a] -> [a] -> [a]
-- How might that change when we apply -- it to the following value?
myConcat x = x ++ " yo"
-- myConcat :: [Char] -> [Char]

-- 2. -- General function
-- (*) :: Num a => a -> a -> a
-- Applied to a value
myMult x = (x / 3) * 5
-- myMult :: Fractional a => a -> a

-- 3.
-- take :: Int -> [a] -> [a]
myTake x = take x "hey you"
-- myTake :: Int -> [Char]

-- 4.
-- (>) :: Ord a => a -> a -> Bool
myCom x = x > (length [1..10])
-- myCom ::  Int -> Bool

-- 5.
-- (<) :: Ord a => a -> a -> Bool
myAlph x = x < 'z'
-- myAlph :: Char -> Bool