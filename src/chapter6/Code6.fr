module Code6 where

-- Eq Instances
-- 1
data TisAnInteger = TisAn Integer
instance Eq TisAnInteger where
    (==) (TisAn a) (TisAn b) = a == b
    (hashCode) (TisAn a) = 1
    
-- FREGE hashCode definitions are needed
    
-- 2
data TwoIntegers = Two Integer Integer
instance Eq TwoIntegers where
    (==) (Two a b) (Two a' b') = (a == a') &&  (b == b')
    (hashCode) (Two a b) = 1

--3 
data StringOrInt = TisAnInt Int | TisAString String

instance Eq StringOrInt where
    (==) (TisAnInt a) (TisAnInt a')     = a == a'
    (==) (TisAString a) (TisAString a') = a == a'
    (==) _ _                            = False
    (hashCode) (TisAnInt a) = 1
    (hashCode) (TisAString a) = 1

-- 4
data Pair a = Pair a a
instance Eq a => Eq (Pair a) where
    (==) (Pair a b) (Pair a' b') = (a == a') &&  (b == b')
    (hashCode) (Pair a b) = 1

-- 5
data Tuple a b = Tuple a b
instance (Eq a, Eq b) => Eq (Tuple a b) where
    (==) (Tuple a b) (Tuple a' b') = (a == a') &&  (b == b')
    (hashCode) (Tuple a b) = 1

--6
data Which a = ThisOne a | ThatOne a
instance Eq a => Eq (Which a) where
    (==) (ThisOne a) (ThisOne a') = a == a'
    (==) (ThatOne a) (ThatOne a') = a == a'
    (==) _ _                      = False
    (hashCode) (ThisOne a) = 1
    (hashCode) (ThatOne a) = 1

-- 7
data EitherOr a b = Hello a | Goodbye b
instance (Eq a, Eq b) => Eq (EitherOr a b) where
    (==) (Hello a) (Hello a')     = a == a'
    (==) (Goodbye a) (Goodbye a') = a == a'
    (==) _ _                      = False
    (hashCode) (Hello a) = 1
    (hashCode) (Goodbye a) = 1

-- chapter example
data DayOfWeek = Mon | Tue | Weds | Thu | Fri | Sat | Sun
derive Ord DayOfWeek
derive Show DayOfWeek

-- day of week and numerical day of month
data Date =
    Date DayOfWeek Int
  
instance Eq DayOfWeek where 
    (==) Mon Mon   = True
    (==) Tue Tue   = True
    (==) Weds Weds = True
    (==) Thu Thu   = True
    (==) Fri Fri   = True
    (==) Sat Sat   = True
    (==) Sun Sun   = True
    (==) _ _       = False
    (hashCode) (_) = 1


instance Eq Date where
    (==) (Date weekday dayOfMonth) (Date weekday' dayOfMonth') = weekday == weekday' && dayOfMonth == dayOfMonth'
    (hashCode) (_) = 1

-- Will They Work?
-- 1.
e1 = max (length [1, 2, 3]) (length [8, 9, 10, 11, 12])
-- ok, correct types and precedence

-- 2.
e2 = compare (3 * 4) (3 * 5)
-- ok, correct types and precedence

-- 3.
-- e3 = compare "Julie" True
-- no comparable types

-- 4.
e4 = (5 + 3) > (3 + 6)
-- ok, correct types and precedence


-- 6.12 Instances are dispatched by type

class Numberish a where
  fromNumber :: Integer -> a
  toNumber :: a -> Integer

-- pretend newtype is data for now
data Age = Age Integer
derive Eq Age 
derive Show Age

instance Numberish Age where
    fromNumber n = Age n
    toNumber (Age n) = n

data Year = Year Integer
derive Eq Year
derive Show Year

instance Numberish Year where
    fromNumber n = Year n
    toNumber (Year n) = n

sumNumberish :: Numberish a => a -> a -> a
sumNumberish a a' = fromNumber summed
    where
        integerOfA = toNumber a
        integerOfAPrime = toNumber a'
        summed = integerOfA + integerOfAPrime
        
class Numberish' a where
    fromNumber' :: Integer -> a
    toNumber' :: a -> Integer
    defaultNumber' :: a

instance Numberish' Age where
    fromNumber' n = Age n
    toNumber' (Age n) = n
    defaultNumber' = Age 65

instance Numberish' Year where
    fromNumber' n = Year n
    toNumber' (Year n) = n
    defaultNumber' = Year 1988

