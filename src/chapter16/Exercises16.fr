module chapter16.Exercises16 where

import frege.test.QuickCheck

functorIdentity :: (Functor f, Eq (f a)) => f a -> Bool
functorIdentity f = fmap id f == f

functorCompose :: (Eq (f c), Functor f)
                   => (a -> b)
                   -> (b -> c)
                   -> f a
                   -> Bool
functorCompose f g x = (fmap g (fmap f x)) == (fmap (g . f) x)

-- Determine if a valid Functor can be written for the datatype provided.

-- 1. 
data Bool' = False | True
-- no, not higher-kinded

-- 2.
data BoolAndSomethingElse a = False' a | True' a
derive Eq (BoolAndSomethingElse a)
derive Show (BoolAndSomethingElse a)

instance Functor BoolAndSomethingElse where
  fmap f (False' a) = False' (f a)
  fmap f (True' a) = True' (f a)
  
instance Arbitrary a => Arbitrary (BoolAndSomethingElse a) where
  arbitrary = do
                 x <- arbitrary
                 frequency [(1, return (False' x)),
                            (1, return (True' x))]
  
type BoolAndSomethingElseFunctorIdentity = BoolAndSomethingElse Int -> Bool
-- TODO check compile errors
--boolAndSomethingElseFunctorIdentityTest = property (functorIdentity :: BoolAndSomethingElseFunctorIdentity)

-- 3.
data BoolAndMaybeSomethingElse a = Falsish | Truish a
derive Eq (BoolAndMaybeSomethingElse a)
derive Show (BoolAndMaybeSomethingElse a)

instance Functor BoolAndMaybeSomethingElse where
  fmap f (Falsish) = Falsish
  fmap f (Truish a) = Truish (f a)
  
instance Arbitrary a => Arbitrary (BoolAndMaybeSomethingElse a) where
  arbitrary = do
                 x <- arbitrary
                 frequency [(1, return (Falsish)),
                            (1, return (Truish x))]
  
type BoolAndMaybeSomethingElseFunctorIdentity = BoolAndMaybeSomethingElse Int -> Bool
--boolAndMaybeSomethingElseFunctorIdentityTest = property (functorIdentity :: BoolAndMaybeSomethingElseFunctorIdentity)


 
-- 4. Use the kinds to guide you on this one, don’t get too hung up on the details.
-- TODO check error
-- newtype Mu f = InF { outF :: f (Mu f) }

-- 5.
-- Again, follow the kinds and ignore the unfamiliar parts
-- TODO FREGE import GHC.Arr
--data D = D (Array Word Word) Int Int

-- Rearrange the arguments to the type constructor of the datatype so the Functor instance works.
-- 1.
data Sum a b = First a | Second b

instance Functor (Sum e) where
  fmap f (First a)  = First a
  fmap f (Second b) = Second (f b)

-- 2.
data Company a b c = DeepBlue a c | Something b

instance Functor (Company e e') where
  fmap _ (Something b)  = Something b
  fmap f (DeepBlue a c) = DeepBlue a (f c)

-- 3. 
data More a b = L a b a 
              | R b a b
derive Eq (More a b)
derive Show (More a b)

-- TODO
{-instance Functor (More x) where
  -- comliles, but wrong
  fmap f (L a b _) = L a (f b) a
  fmap f (R b a _) = R (f b) a (f b)
  
  -- compile errors
  --fmap f (L a b _) = L (f a) b (f a)
  --fmap f (R b a _) = R b (f a) b

moreTest1 = once $ fmap (+1) (L 1 2 3) == L 2 2 4
moreTest2 = once $ fmap (+1) (R 1 2 3) == R 1 3 3
-}

-- 1.
data Quant a b = Finance | Desk a | Bloor b
derive Eq (Quant a b)
derive Show (Quant a b)

instance Functor (Quant a) where
  fmap f (Finance) = Finance
  fmap f (Desk a) = Desk a
  fmap f (Bloor a) = Bloor (f a)
  
instance (Arbitrary a, Arbitrary b) => Arbitrary (Quant a b) where
  arbitrary = do
                 x <- arbitrary
                 y <- arbitrary
                 frequency [(1, return Finance),
                            (1, return (Desk x)),
                            (1, return (Bloor y))]
  
type QuantFunctorIdentity = Quant Int Int -> Bool
--quantFunctorIdentityTest = property (functorIdentity :: QuantFunctorIdentity)

--type QuantFunctorCompose = Quant Int Int -> Bool
--quantFunctorTest = property (functorCompose :: QuantFunctorCompose)


-- 2. No, it’s not interesting by itself.
data K a b = K a
derive Eq (K a b)
derive Show (K a b)

instance Functor (K a) where
  fmap f (K a) = K a

instance (Arbitrary a, Arbitrary b) => Arbitrary (K a b) where
  arbitrary = do
                 x <- arbitrary
                 return (K x)
  
type KFunctorIdentity = K Int Int -> Bool
--kFunctorIdentityTest = property (functorIdentity :: KFunctorIdentity)

-- 3. {-# LANGUAGE FlexibleInstances #-}
{-
data Flip f a b = Flip (f b a)
-- TODO correct derives?
--derive Eq (Flip a b)
--derive Show (Flip f a b)

newtype K' a b = K' a
-- should remind you of an
-- instance you've written before
instance Functor (Flip K' a) where
  fmap = undefined
-}

-- 4.
data EvilGoateeConst a b = GoatyConst b
derive Eq (EvilGoateeConst a b)
derive Show (EvilGoateeConst a b)
-- You thought you'd escaped the goats
     -- by now didn't you? Nope.
-- No, it doesn’t do anything interesting. No magic here or in the previous exercise. If it works, you succeeded.

instance Functor (EvilGoateeConst a) where
  fmap f (GoatyConst b) = (GoatyConst (f b))
  
instance (Arbitrary a, Arbitrary b) => Arbitrary (EvilGoateeConst a b) where
  arbitrary = do
                 x <- arbitrary
                 return (GoatyConst x)
  
type EvilGoateeConstunctorIdentity = EvilGoateeConst Int Int -> Bool
--evilGoateeConstFunctorIdentityTest = property (functorIdentity :: EvilGoateeConstunctorIdentity)

-- 5. Do you need something extra to make the instance work?
data LiftItOut f a = LiftItOut (f a)

{-
instance Functor (LiftItOut a) where
  fmap f (LiftItOut a) = \x -> f (LiftItOut a)

instance Arbitrary a => Arbitrary (LiftItOut f a) where
  arbitrary = do
                 x <- arbitrary
                 g <- arbitrary
                 return (LiftItOut (g x))

  
type LiftItOutIdentity = LiftItOut (Int -> Int) -> Int -> Bool
--liftItOutFunctorIdentityTest = property (functorIdentity :: LiftItOutIdentity)

-}
-- 6.
data Parappa f g a = DaWrappa (f a) (g a)

-- 7. Don’t ask for more typeclass instances than you need. You can let GHC tell you what to do.
data IgnoreOne f g a b = IgnoringSomething (f a) (g b)

-- 8.
data Notorious g o a t = Notorious (g o) (g a) (g t)

-- 9. You’ll need to use recursion.
data List a = Nil | Cons a (List a)
derive Eq (List a)
derive Show (List a)

instance Functor List where
  fmap f (Nil) = Nil
  fmap f (Cons a xs) = Cons (f a) (fmap f xs)
  
{-
instance (Arbitrary a) => Arbitrary (List a) where
  arbitrary = do
                 x <- arbitrary
                 frequency [(1, return Nil),
                            (1, return Cons x xs)]
                 --,
                 --           (1, return (Cons x xs))]
                            
  -}
type ListFunctorIdentity = List Int -> Bool
--listFunctorIdentityTest = property (functorIdentity :: ListFunctorIdentity)


-- 10. A tree of goats forms a Goat-Lord, fearsome poly-creature.
data GoatLord a =
    NoGoat
  | OneGoat a
  | MoreGoats (GoatLord a)
              (GoatLord a)
              (GoatLord a)     
derive Eq (GoatLord a)
derive Show (GoatLord a)
-- A VERITABLE HYDRA OF GOATS

instance Functor GoatLord where
  fmap f (NoGoat) = NoGoat
  fmap f (OneGoat a) = OneGoat (f a)
  fmap f (MoreGoats a b c) = MoreGoats (fmap f a) (fmap f b) (fmap f c)

{-
instance (Arbitrary a) => Arbitrary (GoatLord a) where
  arbitrary = do
                 x <- arbitrary
                 y <- arbitrary
                 z <- arbitrary
                 frequency [(1, return NoGoat),
                            (1, return OneGoat x),
                            (1, return MoreGoats (OneGoat x) (OneGoat y) (OneGoat z))]
-}

type GoatLordFunctorIdentity = GoatLord Int -> Bool
--goatLordFunctorIdentityTest = property (functorIdentity :: GoatLordFunctorIdentity)

-- 11. You’ll use an extra functor for this one, although your solution might do it monomorphically without using fmap. Keep in mind that you will probably not be able to validate this one in the usual manner. Do your best to make it work.2
data TalkToMe a = Halt | Print String a | Read (String -> a)
-- TODO