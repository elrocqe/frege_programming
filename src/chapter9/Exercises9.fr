module chapter9.Exercises9 where

import Data.Char
import frege.test.QuickCheck


--main :: IO ()
--main = print (myAny odd [1,3,5])

-- 1. 
-- :t isUpper
-- :t toUpper
-- FREGE: type in Frege is ω

-- 2.
myFilter :: [Char] -> [Char]
myFilter = filter isUpper

-- 3.
capitalize :: [Char] -> [Char]
capitalize [] = []
capitalize (x:xs) = toUpper x : xs

-- 4.
capitalizeAll [] = []
capitalizeAll (x:xs) = toUpper x : capitalizeAll xs

-- 5.
-- :t head
-- ListView α => α β -> β
myHead' :: [Char] -> Char
myHead' (x:_) = toUpper x

-- 6.
myHead :: ListView a => a Char -> Char
myHead xs = toUpper (head xs)

myHeadPF :: ListView a => a Char->Char
myHeadPF = toUpper . head


-- Ciphers

-- in Haskell
-- chr :: Int -> Char
-- ord :: Char -> Int

-- in Frege
-- char :: Int -> Char
-- ord :: Enum e => e -> Int

caesar :: Int -> [Char] -> [Char]
caesar n [] = []
caesar n (x:[]) = [chr (ord 'a' + mod ((ord x - ord 'a')  + n) 26)]
caesar n (x:xs) = [chr (ord 'a' + mod ((ord x - ord 'a')  + n) 26)] ++ (caesar n xs)

caesarTest1 = once $ caesar 3 ['a','b', 'c'] == ['d', 'e', 'f']
caesarTest2 = once $ caesar 3 ['x', 'y', 'z'] == ['a', 'b', 'c']

unCaesar :: Int -> [Char] -> [Char]
unCaesar n [] = []
unCaesar n (x:[]) = [chr (ord 'z' - mod ((ord 'z' - ord x)  + n) 26)]
unCaesar n (x:xs) = [chr (ord 'z' - mod ((ord 'z' - ord x)  + n) 26)] ++ (unCaesar n xs)

unCaesarTest1 = once $ unCaesar 3 ['d', 'e', 'f'] == ['a','b', 'c']
unCaesarTest2 = once $ unCaesar 3  ['a', 'b', 'c'] == ['x', 'y', 'z']

-- Writing your own standard functions

-- direct recursion, not using (&&)
myAnd :: [Bool] -> Bool
myAnd [] = True
myAnd (x:xs) = if x == False then False else myAnd xs
-- direct recursion, using (&&)
myAnd' :: [Bool] -> Bool
myAnd' [] = True
myAnd' (x:xs) = x && myAnd xs

-- 1.
myOr :: [Bool] -> Bool
myOr [] = False
myOr (x:xs) = x || myOr xs

-- 2.
myAny :: (a -> Bool) -> [a] -> Bool
myAny _ [] = False
myAny f (x:xs) = f x || myAny f xs

-- 3.
myElem :: Eq a => a -> [a] -> Bool
myElem _ [] = False
myElem e (x:xs) =  (x == e) || myElem e xs

-- 4.
myReverse :: [a] -> [a]
myReverse [] = []
myReverse (x:xs) = myReverse xs ++ [x]

-- 5.
squish :: [[a]] -> [a]
squish [] = []
squish (x:xs) = squishInner x $ squish xs

-- helper function
squishInner [] all = all
squishInner (x:xs) all = x : squishInner xs all

-- 6.
squishMap :: (a -> [b]) -> [a] -> [b]
squishMap f (x:xs) = squishInner (f x) $ squishMap f xs

-- 7.
squishAgain :: [[a]] -> [a]
squishAgain = squishMap id

-- 8.
myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
myMaximumBy _ (x:[]) = x
myMaximumBy f (x:xs) = let y = myMaximumBy f xs in
	case f x y of
      LT -> y
      EQ -> x
      GT -> x
      	
-- 9.
myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
myMinimumBy _ (x:[]) = x
myMinimumBy f (x:xs) = let y = myMinimumBy f xs in
	case f x y of
      LT -> x
      EQ -> x
      GT -> y
      	
-- 10.
myMaximum :: (Ord a) => [a] -> a
myMaximum = myMaximumBy compare
myMinimum :: (Ord a) => [a] -> a
myMinimum = myMinimumBy compare
