module chapter8.Exercises8 where

import frege.test.QuickCheck

main :: IO ()
main = print (digits 12324546)
  
-- Reviewing curring
cattyConny :: String -> String -> String
cattyConny x y = x ++ " mrow " ++ y

-- fill in the types
flippy :: String -> String -> String
flippy = flip cattyConny

appedCatty :: String -> String
appedCatty = cattyConny "woops"

frappe :: String -> String
frappe = flippy "haha"

appedCattyTest = once $ appedCatty "woohoo!" == "woops mrow woohoo!" 
frappeTest = once $ frappe (appedCatty "2") == "woops mrow 2 mrow haha"
frappeAppedCattyTest = once $ appedCatty (frappe "blue") == "woops mrow blue mrow haha"
cattyConnyTest = once $ cattyConny (frappe "pink") (cattyConny "green" (appedCatty "blue")) == "pink mrow haha mrow green mrow woops mrow blue"
cattyConnyFlippyTest = once $ cattyConny (flippy "Pugs" "are") "awesome" == "are mrow Pugs mrow awesome"

-- Recursion
-- 2.
mySum :: (Eq a, Num a) => a -> a
mySum 0 = 0
mySum n = go n 0
 where 
  go n sum
    | n <= 0    = sum
    | otherwise = go (n - 1) (n + sum)
    
mySumTest = once $ mySum 5 == 15

-- 3.
myMult :: (Integral a) => a -> a -> a
myMult x y
    | x == 0 || y == 0  = 0
    | x < 0 && y < 0    = -(go (-x) (-y) 0)
    | x < 0 && y > 0    = -(go (-x) y 0)
    | x > 0 && y < 0    = -(go x (-y) 0)
    | otherwise         = go x y 0
    where 
      go x y product
        | y <= 0    = product
        | otherwise = go x (y-1) (x + product)
        
myMultTest  = once $ myMult 2 3 == 6
myMultTest1 = once $ myMult (-1) 3 == (-3)
myMultTest2 = once $ myMult 1 (-3) == (-3)
myMultTest3 = once $ myMult 0 2 == 0
myMultTest4 = once $ myMult 2 0 == 0
myMultTest5 = once $ myMult 3 4 == 12

-- Fixing dividedBy

data DividedResult = Result Integer | DividedByZero
derive Eq DividedResult
derive Show DividedResult

myDividedBy :: Integral a => a -> a -> DividedResult
myDividedBy num denom
    | denom == 0             = DividedByZero
    | num <= 0 && denom <= 0 = (Result (go (-num) (-denom) 0))
    | num < 0 && denom > 0   = (Result (-(go (-num) denom 0)))
    | num >= 0 && denom < 0  = (Result (-(go num (-denom) 0)))
    | otherwise              = (Result (go num denom 0))
    where
        --go :: Integral a => a -> a -> a -> DividedResult
		go n d count
          | n < d     = count
	      | otherwise = go (n - d) d (count + 1)

myDividedByTest1 = once $ myDividedBy 10 2 == Result 5
myDividedByTest2 = once $ myDividedBy 10 (-2) == Result (-5)
myDividedByTest3 = once $ myDividedBy (-10) (-2) == (Result 5)
myDividedByTest4 = once $ myDividedBy (-10) (2) == (Result (-5))

-- McCarthy 91 function

mc91 :: Int -> Int
mc91 n = if (n > 100) then n - 10 else mc91 (mc91 (n+11))

mc91' n
    | (n > 100) = n - 10
    | otherwise = mc91 (mc91 (n+11))
    
mc91Result = map mc91 [95..110]
mc91Test = once $ map mc91 [95..110] == [91,91,91,91,91,91,91,92,93,94,95,96,97,98,99,100]

-- Numbers into words

import Data.List (intersperse)

digitToWord :: Int -> String
digitToWord n = case n of
				0 -> "zero"
				1 -> "one"
				2 -> "two"
				3 -> "three"
				4 -> "four"
				5 -> "five"
				6 -> "six"
				7 -> "seven"
				8 -> "eight"
				9 -> "nine"

digitToWordTest = once $ map digitToWord [0,1,2,3,4,5,6,7,8,9] == ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]

digits :: Int -> [Int]
digits n
    | n == 0    = []
    | otherwise = digits (div n 10) ++ [mod n 10]

digitsTest = once $ digits 12324546 == [1,2,3,2,4,5,4,6]

wordNumber :: Int -> String
wordNumber n = concat ((intersperse "-" (map digitToWord (digits n))))

wordNumberTest = once $ wordNumber 12324546 == "one-two-three-two-four-five-four-six"